import os
import pandas as pd
from Tache3 import handle_outliers, tukey_outliers, zscore_outliers, isolation_forest_outliers, one_class_svm_outliers

# R√©pertoires
base_dir = "c:/Users/emili/OneDrive/Bureau/DP2/OpenFoodFact_GroupProject/data/dataset"  # R√©pertoire des fichiers d'entr√©e
output_dir = "c:/Users/emili/OneDrive/Bureau/DP2/OpenFoodFact_GroupProject/data/processed"  # R√©pertoire de sortie existant

# V√©rifier si le r√©pertoire de sortie existe
if not os.path.exists(output_dir):
    print(f"‚ùå Le r√©pertoire de sortie n'existe pas : {output_dir}")
    exit(1)  # Arr√™ter le script si le r√©pertoire n'existe pas

# Liste des fichiers g√©n√©r√©s par la t√¢che 2
files_to_process = [
    "openfoodfacts_KNN_NAN_Mean_60.csv",
    "openfoodfacts_KNN_NAN_Mean_70.csv",
    "openfoodfacts_KNN_NAN_Mean_80.csv",
    "openfoodfacts_KNN_NAN_Mean_90.csv",
    "openfoodfacts_KNN_NAN_Median_60.csv",
    "openfoodfacts_KNN_NAN_Median_70.csv",
    "openfoodfacts_KNN_NAN_Median_80.csv",
    "openfoodfacts_KNN_NAN_Median_90.csv"
]

# Strat√©gies pour les outliers
strategies = ["keep", "impute", "remove"]

# Parcourir les fichiers et appliquer les strat√©gies
for file_name in files_to_process:
    file_path = os.path.join(base_dir, file_name)
    
    # V√©rifier si le fichier existe
    if not os.path.exists(file_path):
        print(f"‚ùå Fichier introuvable : {file_name}")
        continue

    print(f"üîç Traitement du fichier : {file_name}")
    
    # Charger le fichier CSV
    df = pd.read_csv(file_path, sep='\t', encoding="utf-8", low_memory=True)

    # S√©lectionner les colonnes num√©riques pour l'analyse des outliers
    numeric_columns = df.select_dtypes(include=[float, int]).columns.tolist()

    # D√©tection des outliers avec les m√©thodes d√©finies dans Tache3
    tukey_outliers_result = tukey_outliers(df, numeric_columns)
    zscore_outliers_result = zscore_outliers(df, numeric_columns)
    isolation_forest_outliers_result = isolation_forest_outliers(df, numeric_columns)
    one_class_svm_outliers_result = one_class_svm_outliers(df, numeric_columns)

    # Combiner tous les indices d'outliers d√©tect√©s
    all_outliers = set(sum(tukey_outliers_result.values(), [])) | \
                   set(sum(zscore_outliers_result.values(), [])) | \
                   set(sum(isolation_forest_outliers_result.values(), [])) | \
                   set(sum(one_class_svm_outliers_result.values(), []))

    # Appliquer chaque strat√©gie
    for strategy in strategies:
        print(f"  ‚û°Ô∏è Application de la strat√©gie : {strategy}")
        df_processed = handle_outliers(df.copy(), all_outliers, strategy=strategy)

        # G√©n√©rer le nom du fichier de sortie
        output_file_name = f"{os.path.splitext(file_name)[0]}_{strategy}.csv"
        output_file_path = os.path.join(output_dir, output_file_name)

        # Sauvegarder le fichier
        df_processed.to_csv(output_file_path, index=False, sep='\t', encoding="utf-8")
        print(f"  ‚úÖ Fichier g√©n√©r√© : {output_file_path}")