import pandas as pd

def process_dataset_with_thresholds(input_file: str, output_dir: str):
    """
    Nettoie un dataset en supprimant les colonnes avec un pourcentage de NaN sup√©rieur √† un seuil
    et remplace les NaN restants par la m√©diane ou la moyenne. G√©n√®re des fichiers pour chaque seuil.

    Args:
        input_file: Chemin du fichier CSV nettoy√© √† charger.
        output_dir: R√©pertoire o√π sauvegarder les fichiers g√©n√©r√©s.
    """
    # Charger le dataset nettoy√©
    print(f"Chargement des donn√©es depuis {input_file}...")
    df = pd.read_csv(input_file, sep='\t', encoding="utf-8")
    print(f"‚úÖ Donn√©es charg√©es avec succ√®s : {len(df)} lignes, {len(df.columns)} colonnes.")

    # D√©finir les seuils √† tester
    thresholds = [60, 70, 80, 90]

    for threshold in thresholds:
        print(f"\nüîç Traitement avec un seuil de valeurs manquantes de {threshold}%...")

        # √âtape 1 : Supprimer les colonnes avec trop de NaN
        missing_percentages = df.isnull().mean() * 100  # Pourcentage de NaN par colonne
        columns_to_drop = missing_percentages[missing_percentages > threshold].index.tolist()
        print(f"üîç Colonnes supprim√©es pour valeurs manquantes (> {threshold}%): {columns_to_drop}")
        df_threshold = df.drop(columns=columns_to_drop)

        # √âtape 2 : Remplacer les NaN restants par la m√©diane
        df_median = df_threshold.fillna(df_threshold.median(numeric_only=True))
        output_file_median = f"{output_dir}/openfoodfacts_KNN_NAN_Median_{threshold}.csv"
        df_median.to_csv(output_file_median, index=False, sep='\t', encoding="utf-8")
        print(f"‚úÖ Fichier g√©n√©r√© avec m√©diane : {output_file_median}")

        # √âtape 3 : Remplacer les NaN restants par la moyenne
        df_mean = df_threshold.fillna(df_threshold.mean(numeric_only=True))
        output_file_mean = f"{output_dir}/openfoodfacts_KNN_NAN_Mean_{threshold}.csv"
        df_mean.to_csv(output_file_mean, index=False, sep='\t', encoding="utf-8")
        print(f"‚úÖ Fichier g√©n√©r√© avec moyenne : {output_file_mean}")


if __name__ == "__main__":
    # Chemin du fichier nettoy√©
    input_file = "c:/Users/emili/OneDrive/Bureau/DP2/OpenFoodFact_GroupProject/data/dataset/openfoodfacts_cleaned.csv"
    # R√©pertoire de sortie
    output_dir = "c:/Users/emili/OneDrive/Bureau/DP2/OpenFoodFact_GroupProject/data/dataset"

    # Lancer le traitement
    process_dataset_with_thresholds(input_file, output_dir)